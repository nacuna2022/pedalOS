#!/usr/bin/python3
# nacuna
# generate a config header from a .config
import sys
import argparse

# create a class for modelling a .config file
# next_config() method retrieves the next key/value pair until it can't
class dot_config:
    default_dotconfig = ".config"

    def __init__(self, dotconfig=".config"):
        self.dotconfig = dot_config.default_dotconfig
        if dotconfig:
            self.dotconfig = dotconfig

        with open(self.dotconfig, "r") as input_cfg:
            self.lines = input_cfg.readlines()

        self.line = 0

    def next_line(self):
        if self.line >= len(self.lines):
            return '' # return empty string when EOF reached
        this_line = self.lines[self.line]
        self.line += 1
        return this_line

    def next_valid_line(self):
        cfg_line = self.next_line()
        while (cfg_line != ''):
            if (cfg_line[:6] == "CONFIG"):
                break
            cfg_line = self.next_line()
        return cfg_line

    def next_config(self):
        cfg_line = self.next_valid_line()
        kv = cfg_line[:-1].split('=') # split and also remove trailing '\n'
        if len(kv) == 2:
            return {"key": kv[0], "value": kv[1]}
        else:
            return None



# create a class for modelling a config header 
# every input of a key-value pair will result in an append to the header file

class header_config:
    def __init__(self, header_config="config.h"):
        self.configs = []
        self.fout = header_config
        self.set_project("UNKNOWN")

    def set_project(self, project):
        self.project = project.upper()

    def add_config(self, key, value):
        if value == 'y':
            value = "1"
        kv = {"key": key, "value": value}
        self.configs.append(kv)

    def get_header(self):
        hdr = f"/* config.h -- Autogenerated! Do not edit. */\n\n"
        hdr += f"#ifndef __INCLUDE_{self.project}_CONFIG_H__\n"
        hdr += f"#define __INCLUDE_{self.project}_CONFIG_H__\n\n"
        hdr += f"/* General Definitions ***********************************/\n\n"
        return hdr

    def get_footer(self):
        ftr = f"\n\n#endif /*__INCLUDE_{self.project}_CONFIG_H__*/\n"
        return ftr

    def write(self):
        with open(self.fout, "w") as fout:
            hdr = self.get_header()
            fout.write(hdr)

            for cfg in self.configs:
                fout.write(f"#define {cfg['key']} {cfg['value']}\n")

            ftr = self.get_footer()
            fout.write(ftr)

if (__name__ == "__main__"):
    ap = argparse.ArgumentParser(description="generate a configuration header file from a .config file")
    ap.add_argument("-i", "--config", help="the .config file to use")
    ap.add_argument("-o", "--header", help="generate this header file")
    args = ap.parse_args()

    dotconfig = dot_config(args.config)
    headerconfig = header_config(args.header)
    headerconfig.set_project("RL06")

    while(True):
        cfg = dotconfig.next_config()
        if (cfg is None):
            break;
        headerconfig.add_config(cfg["key"], cfg["value"])

    headerconfig.write()

